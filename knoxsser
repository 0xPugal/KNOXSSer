#!/bin/bash

CYAN='\033[0;36m'
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
NC='\033[0m'

print_banner() {
    echo ""
    echo -e "${CYAN}██╗  ██╗███╗   ██╗ ██████╗ ██╗  ██╗███████╗███████╗███████╗██████╗  ${NC}"
    echo -e "${CYAN}██║ ██╔╝████╗  ██║██╔═══██╗╚██╗██╔╝██╔════╝██╔════╝██╔════╝██╔══██╗ ${NC}"
    echo -e "${CYAN}█████╔╝ ██╔██╗ ██║██║   ██║ ╚███╔╝ ███████╗███████╗█████╗  ██████╔╝ ${NC}"
    echo -e "${CYAN}██╔═██╗ ██║╚██╗██║██║   ██║ ██╔██╗ ╚════██║╚════██║██╔══╝  ██╔══██╗ ${NC}"
    echo -e "${CYAN}██║  ██╗██║ ╚████║╚██████╔╝██╔╝ ██╗███████║███████║███████╗██║  ██║ ${NC}"
    echo -e "${CYAN}╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝v1.0 ${NC}"
    echo -e "${BOLD}                                        Made with ${RED}<3${NC} by @0xPugal    ${NC}"
    echo ""
}

if [[ $# -eq 0 ]]; then
    print_banner
    exit 0
fi

# Default values
input_type="file"
input_file=""
api_key="YOUR_KNOXSS_API_KEY"
output_file="xss.txt"
VERSION="v1.0"
silent_mode=false
use_notify=false
parallel=1  # Default to scan one URL at a time

usage() {
    print_banner
    echo "Options:"
    echo "  -i, --input     Input file containing URLs or single URL to scan"
    echo "  -o, --output    Output file to save XSS results (default: xss.txt)"
    echo "  -A, --api       API key for Knoxss"
    echo "  -s, --silent    Print only results without displaying the banner"
    echo "  -n, --notify    Send notifications on successful XSSes via notify"
    echo "  -p, --process   Number of URLs to scan parallely(1-5) (default: 1)"
    echo "  -h, --help      Display this help message and exit"
    echo "  -v, --version   Display the version and exit"
    exit 1
}

# Parsing command-line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -i|--input)
            input="$2"
            if [[ -f "$input" ]]; then
                input_type="file"
                input_file="$input"
            else
                input_type="url"
                single_url="$input"
                single_url=$(echo "$single_url" | sed 's/&/%26/g')
            fi
            shift
            shift
            ;;
        -o|--output)
            output_file="$2"
            shift
            shift
            ;;
        -A|--api)
            api_key="$2"
            shift
            shift
            ;;
        -s|--silent)
            silent_mode=true
            shift
            ;;
        -n|--notify)
            use_notify=true
            shift
            ;;
        -p|--process)
            parallel="$2"
            if ! [[ "$parallel" =~ ^[1-5]$ ]]; then
                echo "Error: Invalid value for parallel processing. Choose between 1 to 5."
                usage
            fi
            shift
            shift
            ;;
        -v|--version)
            echo "Version: ${VERSION}"
            exit 0
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option: $1"
            usage
            ;;
    esac
done

# Validations for required arguments
if [[ "$input_type" == "file" && -z "$input_file" ]]; then
    echo "Error: Input file not specified"
    usage
elif [[ "$input_type" == "url" && -z "$single_url" ]]; then
    echo "Error: Single URL not specified"
    usage
fi

# Set up URLs for scanning based on input type
if [[ "$input_type" == "file" ]]; then
    sed -i 's/&/%26/g' "$input_file"
    urls_file="$input_file"
else
    urls_file=$(mktemp)
    echo "$single_url" > "$urls_file"
fi

lineno=1
api_calls=0
todo_file="${urls_file%.*}-$(date +'%Y%m%d%H%M%S').todo"

# Display banner unless in silent mode
if ! $silent_mode; then
    print_banner
fi

# Check for a valid API key
test_response=$(curl "https://api.knoxss.pro" -d target="https://example.com" -H "X-API-KEY: $api_key" -s)

if [[ "$test_response" == "Invalid or expired API key." ]]; then
    echo -e "${RED}Invalid or expired API key. Exiting.${NC}"
    exit 1
fi

# Count the number of URLs in the file
num_urls=$(wc -l < "$urls_file")
echo -e "${CYAN}${BOLD}Scanning $num_urls URLs for XSS...${NC}"

# Main loop to scan URLs
while read -r line; do
    (
        response=$(curl "https://api.knoxss.pro" -d target="$line" -H "X-API-KEY: $api_key" -s)

        if [[ "$response" == *"Invalid or expired API key."* ]]; then
            echo -e "${RED}Invalid or expired API key. Exiting.${NC}"
            exit 1

        elif [[ "$response" == *"<p"* ]]; then
            echo -e "${RED}[ERR] - $line - XSS is not possible in this content-type${NC} [$api_call]"

        else
            xss=$(jq -r '.XSS' <<< "$response")
            poc=$(jq -r '.PoC' <<< "$response")
            error=$(jq -r '.Error' <<< "$response")
            api_call=$(jq -r '.["API Call"]' <<< "$response")

            # Handle XSS detection
            if [[ "$xss" == "true" ]]; then
                echo -e "${GREEN}[XSS!] - $poc ${NC} [$api_call]"
                echo "$response" >> "$output_file"

                if [[ "$use_notify" == true ]]; then
                    echo "$poc" | notify -silent > /dev/null 2>&1
                    if [[ "$api_call" != "0" ]]; then
                        api_calls=$((api_calls + 1))
                    fi
                fi

            elif [[ "$xss" == "false" ]]; then
                echo -e "${YELLOW}[No XSS] - $line ${NC} [$api_call]"
                if [[ "$api_call" != "0" ]]; then
                    api_calls=$((api_calls + 1))
                fi

            elif [[ "$error" == "KNOXSS can't test it (forbidden)" ]]; then
                echo -e "${RED}[ERR] - $line - Forbidden ${NC} [$api_call]"

            elif [[ "$error" == "target connection issues (timeout)" ]]; then
                echo -e "${RED}[ERR] - $line - Target connection issues ${NC} [$api_call]"

            elif [[ "$error" == "KNOXSS can't finish scan gracefully (reason unknown)" ]]; then
                echo -e "${RED}[ERR] - $line - can't finish scan gracefully${NC} [$api_call]"
                echo "$line" >> "$todo_file"

            else
                echo -e "${RED}[ERR] - $line - Unknown error ${NC} [$api_call]"
                echo "$line" >> "$todo_file"
            fi
        fi
    ) &

    # Limit number of parallel processes based on user input
    if [[ $(jobs -r -p | wc -l) -ge "$parallel" ]]; then
        wait -n
    fi

    sleep 2  # Delay between API calls to avoid rate limiting
    lineno=$((lineno + 1))
done < "$urls_file"

# Wait for all remaining background processes to finish
wait

# Final summary
echo "If any URLs that encountered errors are saved into $todo_file"

# Cleanup temporary files if needed
if [[ "$input_type" == "url" ]]; then
    rm "$urls_file"
fi
