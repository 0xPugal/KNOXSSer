#!/bin/bash

CYAN='\033[0;36m'
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
NC='\033[0m'

print_banner() {
echo ""
echo -e "${CYAN}██╗  ██╗███╗   ██╗ ██████╗ ██╗  ██╗███████╗███████╗███████╗██████╗  ${NC}"
echo -e "${CYAN}██║ ██╔╝████╗  ██║██╔═══██╗╚██╗██╔╝██╔════╝██╔════╝██╔════╝██╔══██╗ ${NC}"
echo -e "${CYAN}█████╔╝ ██╔██╗ ██║██║   ██║ ╚███╔╝ ███████╗███████╗█████╗  ██████╔╝ ${NC}"
echo -e "${CYAN}██╔═██╗ ██║╚██╗██║██║   ██║ ██╔██╗ ╚════██║╚════██║██╔══╝  ██╔══██╗ ${NC}"
echo -e "${CYAN}██║  ██╗██║ ╚████║╚██████╔╝██╔╝ ██╗███████║███████║███████╗██║  ██║ ${NC}"
echo -e "${CYAN}╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝v0.6 ${NC}"
echo -e "${BOLD}                                        Made with ${RED}<3${NC} by @0xPugal    ${NC}   "
echo -e ""
}

if [[ $# -eq 0 ]]; then
    print_banner
    exit 0
fi

# Default values
input_type="file"
input_file=""
api_key="YOUR_KNOXSS_API_KEY"
output_file="xss.txt"
VERSION="v0.6"
silent_mode=false
use_notify=false

usage() {
    print_banner
    echo "Options:"
    echo "  -i, --input     Input file containing URLs or single URL to scan"
    echo "  -o, --output    Output file to save XSS results (default: xss.txt)"
    echo "  -A, --api       API key for Knoxss"
    echo "  -s, --silent    Print only results without displaying the banner"
    echo "  -n, --nofify    Send notifications on successfull XSSes via notify"
    echo "  -h, --help      Display this help message and exit"
    echo "  -v, --version   Display the version and exit"
    exit 1
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -i|--input)
            input="$2"
            if [[ -f "$input" ]]; then
                input_type="file"
                input_file="$input"
            else
                input_type="url"
                single_url="$input"
                single_url=$(echo "$single_url" | sed 's/&/%26/g')
            fi
            shift
            shift
            ;;
        -o|--output)
            output_file="$2"
            shift
            shift
            ;;
        -A|--api)
            api_key="$2"
            shift
            shift
            ;;
        -s|--silent)
            silent_mode=true
            shift
            ;;
        -n|--notify)
            use_notify=true  # Set the flag to true
            shift
            ;;
        -v|--version)
            echo "Version: ${VERSION}"
            exit 0
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option: $1"
            exit 0
            ;;
    esac
done

if [[ "$input_type" == "file" && -z "$input_file" ]]; then
    echo "Error: Input file not specified"
    usage
elif [[ "$input_type" == "url" && -z "$single_url" ]]; then
    echo "Error: Single URL not specified"
    usage
fi

if [[ "$input_type" == "file" ]]; then
    sed -i 's/&/%26/g' "$input_file"
    urls_file="$input_file"
else
    urls_file=$(mktemp)
    echo "$single_url" > "$urls_file"
fi

handle_ctrl_c() {
    echo -e "\nCtrl-C detected. remaining URLs are saved into $todo_file..."
    sed -n "${lineno},\$p" "$urls_file" > "$todo_file"
    echo "Total API calls made: $api_calls"
    exit 1
}

trap handle_ctrl_c INT

lineno=1
api_calls=0
todo_file="${urls_file%.*}-$(date +'%Y%m%d%H%M%S').todo"
error_url="${urls_file%.*}-errors.todo"

if ! $silent_mode; then
    print_banner
fi

while read line; do
    response=$(curl https://api.knoxss.pro -d target="$line" -H "X-API-KEY: $api_key" -s)
    xss=$(jq -r '.XSS' <<< "$response")
    poc=$(jq -r '.PoC' <<< "$response")
    error=$(jq -r '.Error' <<< "$response")
    api_call=$(jq -r '.["API Call"]' <<< "$response")

    if [[ "$xss" == "true" ]]; then
        echo -e "${GREEN}[XSS!] - $poc ${NC} [$api_call]"
        echo "$response" >> "$output_file"

        if  [[ "$use_notify" == true ]]; then
                echo "$poc" | notify -silent > /dev/null 2>&1 
                if [[ "$api_call" != "0" ]]; then
                        api_calls=$((api_calls + 1))
                fi
        fi

    elif [[ "$xss" == "false" ]]; then
        echo -e "${YELLOW}[No XSS] - $line${NC} [$api_call]"
        if [[ "$api_call" != "0" ]]; then
            api_calls=$((api_calls + 1))
        fi

    elif [[ "$error" == "KNOXSS can't test it (forbidden)" ]]; then
        echo -e "${RED}[ERR] - $line - Forbidden ${NC} [$api_call]"

    elif [[ "$error" == "Content type of target page can't lead to XSS!" ]]; then
        echo -e "${RED}[ERR] - $line - XSS not possible ${NC} [$api_call]"

    elif [[ "$error" == "target connection issues (timeout)" ]]; then
        echo -e "${RED}[ERR] - $line - Target connection issues ${NC} [$api_call]"

    elif [[ "$error" == "KNOXSS can't finish scan gracefully (reason unknown)" ]]; then
        echo -e "${RED}[ERR] - $line - can't finish scan gracefully${NC} [$api_call]"

    else
        echo -e "${RED}[ERR] - $line - KNOXSS ERROR(Unknown) ${NC} [$api_call]"
        echo "$line" >> "$error_url"
    fi
    sleep 2
    lineno=$((lineno + 1))
done < "$urls_file"

echo "URLs which encountered error are saved into $error_url"
echo "Total API calls made: $api_calls"

if [[ "$input_type" == "url" ]]; then
    rm "$urls_file"
fi
